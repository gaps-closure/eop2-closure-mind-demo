// compareOrionPublic.cpp was generated by ProtoGen version 2.12.c

#include "compareOrionPublic.h"

/*!
 * Compare two Date_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareDate_t(QString prename, const Date_t* user1, const Date_t* user2)
{
    QString report;

    if(user1->year != user2->year)
        report += prename + ":year"  + " '" + QString::number(user1->year) + "' '" + QString::number(user2->year) + "'\n";

    if(user1->month != user2->month)
        report += prename + ":month"  + " '" + QString::number(user1->month) + "' '" + QString::number(user2->month) + "'\n";

    if(user1->day != user2->day)
        report += prename + ":day"  + " '" + QString::number(user1->day) + "' '" + QString::number(user2->day) + "'\n";

    return report;

}// compareDate_t

/*!
 * Compare two OrionCmd_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCmd_t(QString prename, const OrionCmd_t* user1, const OrionCmd_t* user2)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->Target[i] != user2->Target[i])
            report += prename + ":Target"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->Target[i], 'g', 16) + "' '" + QString::number(user2->Target[i], 'g', 16) + "'\n";

    if(user1->Mode != user2->Mode)
        report += prename + ":Mode"  + " '" + QString::number(user1->Mode) + "' '" + QString::number(user2->Mode) + "'\n";

    if(user1->Stabilized != user2->Stabilized)
        report += prename + ":Stabilized"  + " '" + QString::number(user1->Stabilized) + "' '" + QString::number(user2->Stabilized) + "'\n";

    if(user1->ImpulseTime != user2->ImpulseTime)
        report += prename + ":ImpulseTime"  + " '" + QString::number(user1->ImpulseTime, 'g', 16) + "' '" + QString::number(user2->ImpulseTime, 'g', 16) + "'\n";

    return report;

}// compareOrionCmd_t

/*!
 * Compare two OrionStartupCmd_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionStartupCmd_t(QString prename, const OrionStartupCmd_t* user1, const OrionStartupCmd_t* user2)
{
    QString report;

    report += compareOrionCmd_t(prename + ":Cmd", &user1->Cmd, &user2->Cmd);

    return report;

}// compareOrionStartupCmd_t

/*!
 * Compare two OrionStartupCmd packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionStartupCmdPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionStartupCmd_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionStartupCmdPacketStructure(pkt1, &struct1) || !decodeOrionStartupCmdPacketStructure(pkt2, &struct2))
    {
        report = "OrionStartupCmd packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionStartupCmd packet sizes are different\n";

    report += compareOrionStartupCmd_t("name", &struct1, &struct2);

    return report;

}// compareOrionStartupCmdPacket

//! Compare two PosPreset_t structures and generate a report
QString comparePosPreset_t(QString prename, const PosPreset_t* user1, const PosPreset_t* user2);

/*!
 * Compare two PosPreset_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString comparePosPreset_t(QString prename, const PosPreset_t* user1, const PosPreset_t* user2)
{
    QString report;

    if(user1->Pan != user2->Pan)
        report += prename + ":Pan"  + " '" + QString::number(user1->Pan, 'g', 16) + "' '" + QString::number(user2->Pan, 'g', 16) + "'\n";

    if(user1->Tilt != user2->Tilt)
        report += prename + ":Tilt"  + " '" + QString::number(user1->Tilt, 'g', 16) + "' '" + QString::number(user2->Tilt, 'g', 16) + "'\n";

    if(user1->Enabled != user2->Enabled)
        report += prename + ":Enabled"  + " '" + QString::number(user1->Enabled) + "' '" + QString::number(user2->Enabled) + "'\n";

    return report;

}// comparePosPreset_t

/*!
 * Compare two OrionPositions_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionPositions_t(QString prename, const OrionPositions_t* user1, const OrionPositions_t* user2)
{
    QString report;
    int i = 0;

    if(user1->NumPositions != user2->NumPositions)
        report += prename + ":NumPositions"  + " '" + QString::number(user1->NumPositions) + "' '" + QString::number(user2->NumPositions) + "'\n";

    for(i = 0; i < NUM_POSITIONS; i++)
        report += comparePosPreset_t(prename + ":PosPreset" + "[" + QString::number(i) + "]", &user1->PosPreset[i], &user2->PosPreset[i]);

    return report;

}// compareOrionPositions_t

/*!
 * Compare two OrionPositions packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionPositionsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionPositions_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionPositionsPacketStructure(pkt1, &struct1) || !decodeOrionPositionsPacketStructure(pkt2, &struct2))
    {
        report = "OrionPositions packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionPositions packet sizes are different\n";

    report += compareOrionPositions_t("name", &struct1, &struct2);

    return report;

}// compareOrionPositionsPacket

/*!
 * Compare two OrionFlirSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionFlirSettings_t(QString prename, const OrionFlirSettings_t* user1, const OrionFlirSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->DisableSffc != user2->DisableSffc)
        report += prename + ":DisableSffc"  + " '" + QString::number(user1->DisableSffc) + "' '" + QString::number(user2->DisableSffc) + "'\n";

    if(user1->Palette != user2->Palette)
        report += prename + ":Palette"  + " '" + QString::number(user1->Palette) + "' '" + QString::number(user2->Palette) + "'\n";

    if(user1->NucType != user2->NucType)
        report += prename + ":NucType"  + " '" + QString::number(user1->NucType) + "' '" + QString::number(user2->NucType) + "'\n";

    if(user1->BlackHot != user2->BlackHot)
        report += prename + ":BlackHot"  + " '" + QString::number(user1->BlackHot) + "' '" + QString::number(user2->BlackHot) + "'\n";

    if(user1->MaxAgcGain != user2->MaxAgcGain)
        report += prename + ":MaxAgcGain"  + " '" + QString::number(user1->MaxAgcGain) + "' '" + QString::number(user2->MaxAgcGain) + "'\n";

    if(user1->AceLevel != user2->AceLevel)
        report += prename + ":AceLevel"  + " '" + QString::number(user1->AceLevel) + "' '" + QString::number(user2->AceLevel) + "'\n";

    if(user1->DdeThreshold != user2->DdeThreshold)
        report += prename + ":DdeThreshold"  + " '" + QString::number(user1->DdeThreshold) + "' '" + QString::number(user2->DdeThreshold) + "'\n";

    if(user1->AgcMidpoint != user2->AgcMidpoint)
        report += prename + ":AgcMidpoint"  + " '" + QString::number(user1->AgcMidpoint) + "' '" + QString::number(user2->AgcMidpoint) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime, 'g', 16) + "' '" + QString::number(user2->IntegrationTime, 'g', 16) + "'\n";

    if(user1->AgcType != user2->AgcType)
        report += prename + ":AgcType"  + " '" + QString::number(user1->AgcType) + "' '" + QString::number(user2->AgcType) + "'\n";

    return report;

}// compareOrionFlirSettings_t

/*!
 * Compare two OrionFlirSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionFlirSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionFlirSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionFlirSettingsPacketStructure(pkt1, &struct1) || !decodeOrionFlirSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionFlirSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionFlirSettings packet sizes are different\n";

    report += compareOrionFlirSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionFlirSettingsPacket

/*!
 * Compare two OrionAptinaSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionAptinaSettings_t(QString prename, const OrionAptinaSettings_t* user1, const OrionAptinaSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->MinExposure != user2->MinExposure)
        report += prename + ":MinExposure"  + " '" + QString::number(user1->MinExposure, 'g', 16) + "' '" + QString::number(user2->MinExposure, 'g', 16) + "'\n";

    if(user1->MaxExposure != user2->MaxExposure)
        report += prename + ":MaxExposure"  + " '" + QString::number(user1->MaxExposure, 'g', 16) + "' '" + QString::number(user2->MaxExposure, 'g', 16) + "'\n";

    if(user1->MinGain != user2->MinGain)
        report += prename + ":MinGain"  + " '" + QString::number(user1->MinGain, 'g', 16) + "' '" + QString::number(user2->MinGain, 'g', 16) + "'\n";

    if(user1->MaxGain != user2->MaxGain)
        report += prename + ":MaxGain"  + " '" + QString::number(user1->MaxGain, 'g', 16) + "' '" + QString::number(user2->MaxGain, 'g', 16) + "'\n";

    if(user1->Brightness != user2->Brightness)
        report += prename + ":Brightness"  + " '" + QString::number(user1->Brightness) + "' '" + QString::number(user2->Brightness) + "'\n";

    if(user1->Contrast != user2->Contrast)
        report += prename + ":Contrast"  + " '" + QString::number(user1->Contrast, 'g', 16) + "' '" + QString::number(user2->Contrast, 'g', 16) + "'\n";

    if(user1->Saturation != user2->Saturation)
        report += prename + ":Saturation"  + " '" + QString::number(user1->Saturation, 'g', 16) + "' '" + QString::number(user2->Saturation, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    if(user1->DebugEnable != user2->DebugEnable)
        report += prename + ":DebugEnable"  + " '" + QString::number(user1->DebugEnable) + "' '" + QString::number(user2->DebugEnable) + "'\n";

    if(user1->Hue != user2->Hue)
        report += prename + ":Hue"  + " '" + QString::number(user1->Hue) + "' '" + QString::number(user2->Hue) + "'\n";

    if(user1->Aperture != user2->Aperture)
        report += prename + ":Aperture"  + " '" + QString::number(user1->Aperture, 'g', 16) + "' '" + QString::number(user2->Aperture, 'g', 16) + "'\n";

    if(user1->MinAperture != user2->MinAperture)
        report += prename + ":MinAperture"  + " '" + QString::number(user1->MinAperture, 'g', 16) + "' '" + QString::number(user2->MinAperture, 'g', 16) + "'\n";

    if(user1->MaxAperture != user2->MaxAperture)
        report += prename + ":MaxAperture"  + " '" + QString::number(user1->MaxAperture, 'g', 16) + "' '" + QString::number(user2->MaxAperture, 'g', 16) + "'\n";

    return report;

}// compareOrionAptinaSettings_t

/*!
 * Compare two OrionAptinaSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionAptinaSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionAptinaSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionAptinaSettingsPacketStructure(pkt1, &struct1) || !decodeOrionAptinaSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionAptinaSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionAptinaSettings packet sizes are different\n";

    report += compareOrionAptinaSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionAptinaSettingsPacket

/*!
 * Compare two OrionZafiroSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionZafiroSettings_t(QString prename, const OrionZafiroSettings_t* user1, const OrionZafiroSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->BlackHot != user2->BlackHot)
        report += prename + ":BlackHot"  + " '" + QString::number(user1->BlackHot) + "' '" + QString::number(user2->BlackHot) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime, 'g', 16) + "' '" + QString::number(user2->IntegrationTime, 'g', 16) + "'\n";

    if(user1->LapEnabled != user2->LapEnabled)
        report += prename + ":LapEnabled"  + " '" + QString::number(user1->LapEnabled) + "' '" + QString::number(user2->LapEnabled) + "'\n";

    if(user1->LapGain != user2->LapGain)
        report += prename + ":LapGain"  + " '" + QString::number(user1->LapGain, 'g', 16) + "' '" + QString::number(user2->LapGain, 'g', 16) + "'\n";

    if(user1->AgcSaturation != user2->AgcSaturation)
        report += prename + ":AgcSaturation"  + " '" + QString::number(user1->AgcSaturation, 'g', 16) + "' '" + QString::number(user2->AgcSaturation, 'g', 16) + "'\n";

    if(user1->UseNucTablePresets != user2->UseNucTablePresets)
        report += prename + ":UseNucTablePresets"  + " '" + QString::number(user1->UseNucTablePresets) + "' '" + QString::number(user2->UseNucTablePresets) + "'\n";

    return report;

}// compareOrionZafiroSettings_t

/*!
 * Compare two OrionZafiroSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionZafiroSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionZafiroSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionZafiroSettingsPacketStructure(pkt1, &struct1) || !decodeOrionZafiroSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionZafiroSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionZafiroSettings packet sizes are different\n";

    report += compareOrionZafiroSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionZafiroSettingsPacket

/*!
 * Compare two OrionHitachiSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionHitachiSettings_t(QString prename, const OrionHitachiSettings_t* user1, const OrionHitachiSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime) + "' '" + QString::number(user2->IntegrationTime) + "'\n";

    if(user1->Aperture != user2->Aperture)
        report += prename + ":Aperture"  + " '" + QString::number(user1->Aperture, 'g', 16) + "' '" + QString::number(user2->Aperture, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    if(user1->NightMode != user2->NightMode)
        report += prename + ":NightMode"  + " '" + QString::number(user1->NightMode) + "' '" + QString::number(user2->NightMode) + "'\n";

    return report;

}// compareOrionHitachiSettings_t

/*!
 * Compare two OrionHitachiSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionHitachiSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionHitachiSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionHitachiSettingsPacketStructure(pkt1, &struct1) || !decodeOrionHitachiSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionHitachiSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionHitachiSettings packet sizes are different\n";

    report += compareOrionHitachiSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionHitachiSettingsPacket

/*!
 * Compare two OrionSonySettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionSonySettings_t(QString prename, const OrionSonySettings_t* user1, const OrionSonySettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->MinExposure != user2->MinExposure)
        report += prename + ":MinExposure"  + " '" + QString::number(user1->MinExposure, 'g', 16) + "' '" + QString::number(user2->MinExposure, 'g', 16) + "'\n";

    if(user1->MaxExposure != user2->MaxExposure)
        report += prename + ":MaxExposure"  + " '" + QString::number(user1->MaxExposure, 'g', 16) + "' '" + QString::number(user2->MaxExposure, 'g', 16) + "'\n";

    if(user1->MinGain != user2->MinGain)
        report += prename + ":MinGain"  + " '" + QString::number(user1->MinGain) + "' '" + QString::number(user2->MinGain) + "'\n";

    if(user1->MaxGain != user2->MaxGain)
        report += prename + ":MaxGain"  + " '" + QString::number(user1->MaxGain) + "' '" + QString::number(user2->MaxGain) + "'\n";

    if(user1->Brightness != user2->Brightness)
        report += prename + ":Brightness"  + " '" + QString::number(user1->Brightness) + "' '" + QString::number(user2->Brightness) + "'\n";

    if(user1->Contrast != user2->Contrast)
        report += prename + ":Contrast"  + " '" + QString::number(user1->Contrast, 'g', 16) + "' '" + QString::number(user2->Contrast, 'g', 16) + "'\n";

    if(user1->Saturation != user2->Saturation)
        report += prename + ":Saturation"  + " '" + QString::number(user1->Saturation, 'g', 16) + "' '" + QString::number(user2->Saturation, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness, 'g', 16) + "' '" + QString::number(user2->Sharpness, 'g', 16) + "'\n";

    if(user1->FrameRate != user2->FrameRate)
        report += prename + ":FrameRate"  + " '" + QString::number(user1->FrameRate, 'g', 16) + "' '" + QString::number(user2->FrameRate, 'g', 16) + "'\n";

    return report;

}// compareOrionSonySettings_t

/*!
 * Compare two OrionSonySettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionSonySettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionSonySettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionSonySettingsPacketStructure(pkt1, &struct1) || !decodeOrionSonySettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionSonySettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionSonySettings packet sizes are different\n";

    report += compareOrionSonySettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionSonySettingsPacket

/*!
 * Compare two OrionKtncSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionKtncSettings_t(QString prename, const OrionKtncSettings_t* user1, const OrionKtncSettings_t* user2)
{
    QString report;

    if(user1->Index != user2->Index)
        report += prename + ":Index"  + " '" + QString::number(user1->Index) + "' '" + QString::number(user2->Index) + "'\n";

    if(user1->IntegrationTime != user2->IntegrationTime)
        report += prename + ":IntegrationTime"  + " '" + QString::number(user1->IntegrationTime) + "' '" + QString::number(user2->IntegrationTime) + "'\n";

    if(user1->Aperture != user2->Aperture)
        report += prename + ":Aperture"  + " '" + QString::number(user1->Aperture, 'g', 16) + "' '" + QString::number(user2->Aperture, 'g', 16) + "'\n";

    if(user1->Sharpness != user2->Sharpness)
        report += prename + ":Sharpness"  + " '" + QString::number(user1->Sharpness) + "' '" + QString::number(user2->Sharpness) + "'\n";

    if(user1->VerticalFlip != user2->VerticalFlip)
        report += prename + ":VerticalFlip"  + " '" + QString::number(user1->VerticalFlip) + "' '" + QString::number(user2->VerticalFlip) + "'\n";

    if(user1->ExposureComp != user2->ExposureComp)
        report += prename + ":ExposureComp"  + " '" + QString::number(user1->ExposureComp) + "' '" + QString::number(user2->ExposureComp) + "'\n";

    if(user1->Contrast != user2->Contrast)
        report += prename + ":Contrast"  + " '" + QString::number(user1->Contrast) + "' '" + QString::number(user2->Contrast) + "'\n";

    if(user1->Saturation != user2->Saturation)
        report += prename + ":Saturation"  + " '" + QString::number(user1->Saturation) + "' '" + QString::number(user2->Saturation) + "'\n";

    if(user1->NightMode != user2->NightMode)
        report += prename + ":NightMode"  + " '" + QString::number(user1->NightMode) + "' '" + QString::number(user2->NightMode) + "'\n";

    if(user1->ResetToDefaults != user2->ResetToDefaults)
        report += prename + ":ResetToDefaults"  + " '" + QString::number(user1->ResetToDefaults) + "' '" + QString::number(user2->ResetToDefaults) + "'\n";

    if(user1->HasMaxExposure != user2->HasMaxExposure)
        report += prename + ":HasMaxExposure"  + " '" + QString::number(user1->HasMaxExposure) + "' '" + QString::number(user2->HasMaxExposure) + "'\n";

    if(user1->MaxExposure != user2->MaxExposure)
        report += prename + ":MaxExposure"  + " '" + QString::number(user1->MaxExposure, 'g', 16) + "' '" + QString::number(user2->MaxExposure, 'g', 16) + "'\n";

    if(user1->VersionMajor != user2->VersionMajor)
        report += prename + ":VersionMajor"  + " '" + QString::number(user1->VersionMajor) + "' '" + QString::number(user2->VersionMajor) + "'\n";

    if(user1->VersionMinor != user2->VersionMinor)
        report += prename + ":VersionMinor"  + " '" + QString::number(user1->VersionMinor) + "' '" + QString::number(user2->VersionMinor) + "'\n";

    if(user1->VersionPatch != user2->VersionPatch)
        report += prename + ":VersionPatch"  + " '" + QString::number(user1->VersionPatch) + "' '" + QString::number(user2->VersionPatch) + "'\n";

    return report;

}// compareOrionKtncSettings_t

/*!
 * Compare two OrionKtncSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionKtncSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionKtncSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionKtncSettingsPacketStructure(pkt1, &struct1) || !decodeOrionKtncSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionKtncSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionKtncSettings packet sizes are different\n";

    report += compareOrionKtncSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionKtncSettingsPacket

/*!
 * Compare two OrionUartConfig_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionUartConfig_t(QString prename, const OrionUartConfig_t* user1, const OrionUartConfig_t* user2)
{
    QString report;

    if(user1->port != user2->port)
        report += prename + ":port"  + " '" + QString::number(user1->port) + "' '" + QString::number(user2->port) + "'\n";

    if(user1->baud != user2->baud)
        report += prename + ":baud"  + " '" + QString::number(user1->baud) + "' '" + QString::number(user2->baud) + "'\n";

    if(user1->protocol != user2->protocol)
        report += prename + ":protocol"  + " '" + QString::number(user1->protocol) + "' '" + QString::number(user2->protocol) + "'\n";

    if(user1->temporary != user2->temporary)
        report += prename + ":temporary"  + " '" + QString::number(user1->temporary) + "' '" + QString::number(user2->temporary) + "'\n";

    if(user1->param != user2->param)
        report += prename + ":param"  + " '" + QString::number(user1->param) + "' '" + QString::number(user2->param) + "'\n";

    return report;

}// compareOrionUartConfig_t

/*!
 * Compare two OrionUartConfig packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionUartConfigPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionUartConfig_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionUartConfigPacketStructure(pkt1, &struct1) || !decodeOrionUartConfigPacketStructure(pkt2, &struct2))
    {
        report = "OrionUartConfig packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionUartConfig packet sizes are different\n";

    report += compareOrionUartConfig_t("name", &struct1, &struct2);

    return report;

}// compareOrionUartConfigPacket

/*!
 * Compare two OrionLimitsData_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionLimitsData_t(QString prename, const OrionLimitsData_t* user1, const OrionLimitsData_t* user2)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MinPos[i] != user2->MinPos[i])
            report += prename + ":MinPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MinPos[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->MinPos[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxPos[i] != user2->MaxPos[i])
            report += prename + ":MaxPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxPos[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->MaxPos[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxVel[i] != user2->MaxVel[i])
            report += prename + ":MaxVel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxVel[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->MaxVel[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxAccel[i] != user2->MaxAccel[i])
            report += prename + ":MaxAccel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxAccel[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->MaxAccel[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->ContCur[i] != user2->ContCur[i])
            report += prename + ":ContCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->ContCur[i], 'g', 16) + "' '" + QString::number(user2->ContCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->PeakCur[i] != user2->PeakCur[i])
            report += prename + ":PeakCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->PeakCur[i], 'g', 16) + "' '" + QString::number(user2->PeakCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->PeakCurTime[i] != user2->PeakCurTime[i])
            report += prename + ":PeakCurTime"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->PeakCurTime[i], 'g', 16) + "' '" + QString::number(user2->PeakCurTime[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->InitCur[i] != user2->InitCur[i])
            report += prename + ":InitCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->InitCur[i], 'g', 16) + "' '" + QString::number(user2->InitCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->MaxPower[i] != user2->MaxPower[i])
            report += prename + ":MaxPower"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->MaxPower[i], 'g', 16) + "' '" + QString::number(user2->MaxPower[i], 'g', 16) + "'\n";

    return report;

}// compareOrionLimitsData_t

/*!
 * Compare two OrionLimitsData packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionLimitsDataPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionLimitsData_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionLimitsDataPacketStructure(pkt1, &struct1) || !decodeOrionLimitsDataPacketStructure(pkt2, &struct2))
    {
        report = "OrionLimitsData packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionLimitsData packet sizes are different\n";

    report += compareOrionLimitsData_t("name", &struct1, &struct2);

    return report;

}// compareOrionLimitsDataPacket

/*!
 * Compare two InsOptions_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareInsOptions_t(QString prename, const InsOptions_t* user1, const InsOptions_t* user2)
{
    QString report;
    int i = 0;

    if(user1->enablePlatformRotation != user2->enablePlatformRotation)
        report += prename + ":enablePlatformRotation"  + " '" + QString::number(user1->enablePlatformRotation) + "' '" + QString::number(user2->enablePlatformRotation) + "'\n";

    if(user1->enableCourseIsHeading != user2->enableCourseIsHeading)
        report += prename + ":enableCourseIsHeading"  + " '" + QString::number(user1->enableCourseIsHeading) + "' '" + QString::number(user2->enableCourseIsHeading) + "'\n";

    if(user1->disableMagnetometer != user2->disableMagnetometer)
        report += prename + ":disableMagnetometer"  + " '" + QString::number(user1->disableMagnetometer) + "' '" + QString::number(user2->disableMagnetometer) + "'\n";

    if(user1->disableGPS != user2->disableGPS)
        report += prename + ":disableGPS"  + " '" + QString::number(user1->disableGPS) + "' '" + QString::number(user2->disableGPS) + "'\n";

    if(user1->resetINS != user2->resetINS)
        report += prename + ":resetINS"  + " '" + QString::number(user1->resetINS) + "' '" + QString::number(user2->resetINS) + "'\n";

    if(user1->disableGpsClockError != user2->disableGpsClockError)
        report += prename + ":disableGpsClockError"  + " '" + QString::number(user1->disableGpsClockError) + "' '" + QString::number(user2->disableGpsClockError) + "'\n";

    if(user1->enableAccelBias != user2->enableAccelBias)
        report += prename + ":enableAccelBias"  + " '" + QString::number(user1->enableAccelBias) + "' '" + QString::number(user2->enableAccelBias) + "'\n";

    if(user1->enableTightlyCoupled != user2->enableTightlyCoupled)
        report += prename + ":enableTightlyCoupled"  + " '" + QString::number(user1->enableTightlyCoupled) + "' '" + QString::number(user2->enableTightlyCoupled) + "'\n";

    if(user1->usePhaseForVelocity != user2->usePhaseForVelocity)
        report += prename + ":usePhaseForVelocity"  + " '" + QString::number(user1->usePhaseForVelocity) + "' '" + QString::number(user2->usePhaseForVelocity) + "'\n";

    if(user1->disableL1 != user2->disableL1)
        report += prename + ":disableL1"  + " '" + QString::number(user1->disableL1) + "' '" + QString::number(user2->disableL1) + "'\n";

    if(user1->disableL2 != user2->disableL2)
        report += prename + ":disableL2"  + " '" + QString::number(user1->disableL2) + "' '" + QString::number(user2->disableL2) + "'\n";

    if(user1->disableL5 != user2->disableL5)
        report += prename + ":disableL5"  + " '" + QString::number(user1->disableL5) + "' '" + QString::number(user2->disableL5) + "'\n";

    if(user1->elevationMask != user2->elevationMask)
        report += prename + ":elevationMask"  + " '" + QString::number(user1->elevationMask, 'g', 16) + "' '" + QString::number(user2->elevationMask, 'g', 16) + "'\n";

    if(user1->enablePayloadIns != user2->enablePayloadIns)
        report += prename + ":enablePayloadIns"  + " '" + QString::number(user1->enablePayloadIns) + "' '" + QString::number(user2->enablePayloadIns) + "'\n";

    if(user1->enableNonLinearHeading != user2->enableNonLinearHeading)
        report += prename + ":enableNonLinearHeading"  + " '" + QString::number(user1->enableNonLinearHeading) + "' '" + QString::number(user2->enableNonLinearHeading) + "'\n";

    if(user1->enableSensonorMV != user2->enableSensonorMV)
        report += prename + ":enableSensonorMV"  + " '" + QString::number(user1->enableSensonorMV) + "' '" + QString::number(user2->enableSensonorMV) + "'\n";

    if(user1->enableHD25PayloadINS != user2->enableHD25PayloadINS)
        report += prename + ":enableHD25PayloadINS"  + " '" + QString::number(user1->enableHD25PayloadINS) + "' '" + QString::number(user2->enableHD25PayloadINS) + "'\n";

    if(user1->opticalFlowSetting != user2->opticalFlowSetting)
        report += prename + ":opticalFlowSetting"  + " '" + QString::number(user1->opticalFlowSetting) + "' '" + QString::number(user2->opticalFlowSetting) + "'\n";

    if(user1->enableCustomIMURotation != user2->enableCustomIMURotation)
        report += prename + ":enableCustomIMURotation"  + " '" + QString::number(user1->enableCustomIMURotation) + "' '" + QString::number(user2->enableCustomIMURotation) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        if(user1->gimbalToPlatformEuler[i] != user2->gimbalToPlatformEuler[i])
            report += prename + ":gimbalToPlatformEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->gimbalToPlatformEuler[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->gimbalToPlatformEuler[i]*57.29577951308232, 'g', 16) + "'\n";

    if(user1->initialHeading != user2->initialHeading)
        report += prename + ":initialHeading"  + " '" + QString::number(user1->initialHeading*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->initialHeading*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        if(user1->gpsLeverArm[i] != user2->gpsLeverArm[i])
            report += prename + ":gpsLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->gpsLeverArm[i], 'g', 16) + "' '" + QString::number(user2->gpsLeverArm[i], 'g', 16) + "'\n";

    if(user1->headingObservationBiasAngle != user2->headingObservationBiasAngle)
        report += prename + ":headingObservationBiasAngle"  + " '" + QString::number(user1->headingObservationBiasAngle*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->headingObservationBiasAngle*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        if(user1->secondGPSLeverArm[i] != user2->secondGPSLeverArm[i])
            report += prename + ":secondGPSLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->secondGPSLeverArm[i], 'g', 16) + "' '" + QString::number(user2->secondGPSLeverArm[i], 'g', 16) + "'\n";

    if(user1->alignHeadingNoise != user2->alignHeadingNoise)
        report += prename + ":alignHeadingNoise"  + " '" + QString::number(user1->alignHeadingNoise*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->alignHeadingNoise*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        if(user1->imuToInsEuler[i] != user2->imuToInsEuler[i])
            report += prename + ":imuToInsEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->imuToInsEuler[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->imuToInsEuler[i]*57.29577951308232, 'g', 16) + "'\n";

    return report;

}// compareInsOptions_t

/*!
 * Compare two InsOptions packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareInsOptionsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    InsOptions_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeInsOptionsPacketStructure(pkt1, &struct1) || !decodeInsOptionsPacketStructure(pkt2, &struct2))
    {
        report = "InsOptions packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "InsOptions packet sizes are different\n";

    report += compareInsOptions_t("name", &struct1, &struct2);

    return report;

}// compareInsOptionsPacket

/*!
 * Compare two OrionNetworkByteSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionNetworkByteSettings_t(QString prename, const OrionNetworkByteSettings_t* user1, const OrionNetworkByteSettings_t* user2)
{
    QString report;
    int i = 0;

    for(i = 0; i < 4; i++)
        if(user1->Ip[i] != user2->Ip[i])
            report += prename + ":Ip"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->Ip[i]) + "' '" + QString::number(user2->Ip[i]) + "'\n";

    for(i = 0; i < 4; i++)
        if(user1->Mask[i] != user2->Mask[i])
            report += prename + ":Mask"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->Mask[i]) + "' '" + QString::number(user2->Mask[i]) + "'\n";

    for(i = 0; i < 4; i++)
        if(user1->Gateway[i] != user2->Gateway[i])
            report += prename + ":Gateway"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->Gateway[i]) + "' '" + QString::number(user2->Gateway[i]) + "'\n";

    if(user1->LowDelay != user2->LowDelay)
        report += prename + ":LowDelay"  + " '" + QString::number(user1->LowDelay) + "' '" + QString::number(user2->LowDelay) + "'\n";

    if(user1->Mtu != user2->Mtu)
        report += prename + ":Mtu"  + " '" + QString::number(user1->Mtu) + "' '" + QString::number(user2->Mtu) + "'\n";

    if(user1->SecondaryTcpPort != user2->SecondaryTcpPort)
        report += prename + ":SecondaryTcpPort"  + " '" + QString::number(user1->SecondaryTcpPort) + "' '" + QString::number(user2->SecondaryTcpPort) + "'\n";

    if(user1->LowBandwidth != user2->LowBandwidth)
        report += prename + ":LowBandwidth"  + " '" + QString::number(user1->LowBandwidth) + "' '" + QString::number(user2->LowBandwidth) + "'\n";

    return report;

}// compareOrionNetworkByteSettings_t

/*!
 * Compare two OrionNetworkByteSettings packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionNetworkByteSettingsPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionNetworkByteSettings_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionNetworkByteSettingsPacketStructure(pkt1, &struct1) || !decodeOrionNetworkByteSettingsPacketStructure(pkt2, &struct2))
    {
        report = "OrionNetworkByteSettings packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionNetworkByteSettings packet sizes are different\n";

    report += compareOrionNetworkByteSettings_t("name", &struct1, &struct2);

    return report;

}// compareOrionNetworkByteSettingsPacket

/*!
 * Compare two OrionNetworkByteVideo_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionNetworkByteVideo_t(QString prename, const OrionNetworkByteVideo_t* user1, const OrionNetworkByteVideo_t* user2)
{
    QString report;
    int i = 0;

    for(i = 0; i < 4; i++)
        if(user1->DestIp[i] != user2->DestIp[i])
            report += prename + ":DestIp"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->DestIp[i]) + "' '" + QString::number(user2->DestIp[i]) + "'\n";

    if(user1->Port != user2->Port)
        report += prename + ":Port"  + " '" + QString::number(user1->Port) + "' '" + QString::number(user2->Port) + "'\n";

    if(user1->Bitrate != user2->Bitrate)
        report += prename + ":Bitrate"  + " '" + QString::number(user1->Bitrate) + "' '" + QString::number(user2->Bitrate) + "'\n";

    if(user1->Ttl != user2->Ttl)
        report += prename + ":Ttl"  + " '" + QString::number(user1->Ttl) + "' '" + QString::number(user2->Ttl) + "'\n";

    if(user1->StreamType != user2->StreamType)
        report += prename + ":StreamType"  + " '" + QString::number(user1->StreamType) + "' '" + QString::number(user2->StreamType) + "'\n";

    if(user1->MjpegQuality != user2->MjpegQuality)
        report += prename + ":MjpegQuality"  + " '" + QString::number(user1->MjpegQuality) + "' '" + QString::number(user2->MjpegQuality) + "'\n";

    if(user1->SaveSettings != user2->SaveSettings)
        report += prename + ":SaveSettings"  + " '" + QString::number(user1->SaveSettings) + "' '" + QString::number(user2->SaveSettings) + "'\n";

    if(user1->TsPacketCount != user2->TsPacketCount)
        report += prename + ":TsPacketCount"  + " '" + QString::number(user1->TsPacketCount) + "' '" + QString::number(user2->TsPacketCount) + "'\n";

    if(user1->FramePeriod != user2->FramePeriod)
        report += prename + ":FramePeriod"  + " '" + QString::number(user1->FramePeriod) + "' '" + QString::number(user2->FramePeriod) + "'\n";

    return report;

}// compareOrionNetworkByteVideo_t

/*!
 * Compare two OrionNetworkByteVideo packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionNetworkByteVideoPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionNetworkByteVideo_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionNetworkByteVideoPacketStructure(pkt1, &struct1) || !decodeOrionNetworkByteVideoPacketStructure(pkt2, &struct2))
    {
        report = "OrionNetworkByteVideo packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionNetworkByteVideo packet sizes are different\n";

    report += compareOrionNetworkByteVideo_t("name", &struct1, &struct2);

    return report;

}// compareOrionNetworkByteVideoPacket

//! Compare two OrionCamSettings_t structures and generate a report
QString compareOrionCamSettings_t(QString prename, const OrionCamSettings_t* user1, const OrionCamSettings_t* user2);

/*!
 * Compare two OrionCamSettings_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCamSettings_t(QString prename, const OrionCamSettings_t* user1, const OrionCamSettings_t* user2)
{
    QString report;
    int i = 0;

    if(user1->Type != user2->Type)
        report += prename + ":Type"  + " '" + QString::number(user1->Type) + "' '" + QString::number(user2->Type) + "'\n";

    if(user1->Proto != user2->Proto)
        report += prename + ":Proto"  + " '" + QString::number(user1->Proto) + "' '" + QString::number(user2->Proto) + "'\n";

    if(user1->MinFocalLength != user2->MinFocalLength)
        report += prename + ":MinFocalLength"  + " '" + QString::number(user1->MinFocalLength, 'g', 16) + "' '" + QString::number(user2->MinFocalLength, 'g', 16) + "'\n";

    if(user1->MaxFocalLength != user2->MaxFocalLength)
        report += prename + ":MaxFocalLength"  + " '" + QString::number(user1->MaxFocalLength, 'g', 16) + "' '" + QString::number(user2->MaxFocalLength, 'g', 16) + "'\n";

    if(user1->PixelPitch != user2->PixelPitch)
        report += prename + ":PixelPitch"  + " '" + QString::number(user1->PixelPitch, 'g', 16) + "' '" + QString::number(user2->PixelPitch, 'g', 16) + "'\n";

    if(user1->ArrayWidth != user2->ArrayWidth)
        report += prename + ":ArrayWidth"  + " '" + QString::number(user1->ArrayWidth) + "' '" + QString::number(user2->ArrayWidth) + "'\n";

    if(user1->ArrayHeight != user2->ArrayHeight)
        report += prename + ":ArrayHeight"  + " '" + QString::number(user1->ArrayHeight) + "' '" + QString::number(user2->ArrayHeight) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->AlignMin[i] != user2->AlignMin[i])
            report += prename + ":AlignMin"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->AlignMin[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->AlignMin[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        if(user1->AlignMax[i] != user2->AlignMax[i])
            report += prename + ":AlignMax"  + "[" + QString::number(i) + "]" + " '" + QString::number(user1->AlignMax[i]*57.29577951308232, 'g', 16) + "' '" + QString::number(user2->AlignMax[i]*57.29577951308232, 'g', 16) + "'\n";

    return report;

}// compareOrionCamSettings_t

/*!
 * Compare two OrionCameras_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCameras_t(QString prename, const OrionCameras_t* user1, const OrionCameras_t* user2)
{
    QString report;
    int i = 0;

    if(user1->NumCameras != user2->NumCameras)
        report += prename + ":NumCameras"  + " '" + QString::number(user1->NumCameras) + "' '" + QString::number(user2->NumCameras) + "'\n";

    // Camera settings information
    for(i = 0; i < NUM_CAMERAS; i++)
        report += compareOrionCamSettings_t(prename + ":OrionCamSettings" + "[" + QString::number(i) + "]", &user1->OrionCamSettings[i], &user2->OrionCamSettings[i]);

    return report;

}// compareOrionCameras_t

/*!
 * Compare two OrionCameras packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionCamerasPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionCameras_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionCamerasPacketStructure(pkt1, &struct1) || !decodeOrionCamerasPacketStructure(pkt2, &struct2))
    {
        report = "OrionCameras packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionCameras packet sizes are different\n";

    report += compareOrionCameras_t("name", &struct1, &struct2);

    return report;

}// compareOrionCamerasPacket

/*!
 * Compare two OrionClevisVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionClevisVersion_t(QString prename, const OrionClevisVersion_t* user1, const OrionClevisVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    if(QString::compare(user1->PartNumber, user2->PartNumber) != 0)
        report += prename + ":PartNumber strings differ\n";

    if(user1->OnTime != user2->OnTime)
        report += prename + ":OnTime"  + " '" + QString::number(user1->OnTime) + "' '" + QString::number(user2->OnTime) + "'\n";

    return report;

}// compareOrionClevisVersion_t

/*!
 * Compare two OrionClevisVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionClevisVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionClevisVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionClevisVersionPacketStructure(pkt1, &struct1) || !decodeOrionClevisVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionClevisVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionClevisVersion packet sizes are different\n";

    report += compareOrionClevisVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionClevisVersionPacket

/*!
 * Compare two OrionCrownVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionCrownVersion_t(QString prename, const OrionCrownVersion_t* user1, const OrionCrownVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    if(QString::compare(user1->PartNumber, user2->PartNumber) != 0)
        report += prename + ":PartNumber strings differ\n";

    if(user1->OnTime != user2->OnTime)
        report += prename + ":OnTime"  + " '" + QString::number(user1->OnTime) + "' '" + QString::number(user2->OnTime) + "'\n";

    return report;

}// compareOrionCrownVersion_t

/*!
 * Compare two OrionCrownVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionCrownVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionCrownVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionCrownVersionPacketStructure(pkt1, &struct1) || !decodeOrionCrownVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionCrownVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionCrownVersion packet sizes are different\n";

    report += compareOrionCrownVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionCrownVersionPacket

/*!
 * Compare two OrionPayloadVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionPayloadVersion_t(QString prename, const OrionPayloadVersion_t* user1, const OrionPayloadVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    if(QString::compare(user1->PartNumber, user2->PartNumber) != 0)
        report += prename + ":PartNumber strings differ\n";

    if(user1->OnTime != user2->OnTime)
        report += prename + ":OnTime"  + " '" + QString::number(user1->OnTime) + "' '" + QString::number(user2->OnTime) + "'\n";

    return report;

}// compareOrionPayloadVersion_t

/*!
 * Compare two OrionPayloadVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionPayloadVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionPayloadVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionPayloadVersionPacketStructure(pkt1, &struct1) || !decodeOrionPayloadVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionPayloadVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionPayloadVersion packet sizes are different\n";

    report += compareOrionPayloadVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionPayloadVersionPacket

/*!
 * Compare two OrionTrackerVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionTrackerVersion_t(QString prename, const OrionTrackerVersion_t* user1, const OrionTrackerVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    if(QString::compare(user1->PartNumber, user2->PartNumber) != 0)
        report += prename + ":PartNumber strings differ\n";

    if(user1->AppBits != user2->AppBits)
        report += prename + ":AppBits"  + " '" + QString::number(user1->AppBits) + "' '" + QString::number(user2->AppBits) + "'\n";

    return report;

}// compareOrionTrackerVersion_t

/*!
 * Compare two OrionTrackerVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionTrackerVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionTrackerVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionTrackerVersionPacketStructure(pkt1, &struct1) || !decodeOrionTrackerVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionTrackerVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionTrackerVersion packet sizes are different\n";

    report += compareOrionTrackerVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionTrackerVersionPacket

/*!
 * Compare two OrionRetractVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionRetractVersion_t(QString prename, const OrionRetractVersion_t* user1, const OrionRetractVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    return report;

}// compareOrionRetractVersion_t

/*!
 * Compare two OrionRetractVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionRetractVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionRetractVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionRetractVersionPacketStructure(pkt1, &struct1) || !decodeOrionRetractVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionRetractVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionRetractVersion packet sizes are different\n";

    report += compareOrionRetractVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionRetractVersionPacket

/*!
 * Compare two OrionLensCtlVersion_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionLensCtlVersion_t(QString prename, const OrionLensCtlVersion_t* user1, const OrionLensCtlVersion_t* user2)
{
    QString report;

    if(QString::compare(user1->Version, user2->Version) != 0)
        report += prename + ":Version strings differ\n";

    return report;

}// compareOrionLensCtlVersion_t

/*!
 * Compare two OrionLensCtlVersion packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionLensCtlVersionPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionLensCtlVersion_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionLensCtlVersionPacketStructure(pkt1, &struct1) || !decodeOrionLensCtlVersionPacketStructure(pkt2, &struct2))
    {
        report = "OrionLensCtlVersion packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionLensCtlVersion packet sizes are different\n";

    report += compareOrionLensCtlVersion_t("name", &struct1, &struct2);

    return report;

}// compareOrionLensCtlVersionPacket

/*!
 * Compare two OrionBoard_t structures and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param user1 is the first data to compare
 * \param user1 is the second data to compare
 * \return a string describing any differences between user1 and user2. The string will be empty if there are no differences
 */
QString compareOrionBoard_t(QString prename, const OrionBoard_t* user1, const OrionBoard_t* user2)
{
    QString report;

    if(user1->boardSN != user2->boardSN)
        report += prename + ":boardSN"  + " '" + QString::number(user1->boardSN) + "' '" + QString::number(user2->boardSN) + "'\n";

    if(user1->assemblySN != user2->assemblySN)
        report += prename + ":assemblySN"  + " '" + QString::number(user1->assemblySN) + "' '" + QString::number(user2->assemblySN) + "'\n";

    if(user1->config != user2->config)
        report += prename + ":config"  + " '" + QString::number(user1->config) + "' '" + QString::number(user2->config) + "'\n";

    if(user1->boardEnum != user2->boardEnum)
        report += prename + ":boardEnum"  + " '" + QString::number(user1->boardEnum) + "' '" + QString::number(user2->boardEnum) + "'\n";

    report += compareDate_t(prename + ":manufactureDate", &user1->manufactureDate, &user2->manufactureDate);

    report += compareDate_t(prename + ":calibrationDate", &user1->calibrationDate, &user2->calibrationDate);

    return report;

}// compareOrionBoard_t

/*!
 * Compare two OrionBoard packets and generate a report of any differences.
 * \param prename is prepended to the name of the data field in the comparison report
 * \param pkt1 is the first data to compare
 * \param pkt2 is the second data to compare
 * \return a string describing any differences between pk1 and pkt2. The string will be empty if there are no differences
 */
QString compareOrionBoardPacket(const void* pkt1, const void* pkt2)
{
    QString report;

    // Structures to decode into
    OrionBoard_t struct1, struct2;

    // All zeroes before decoding
    memset(&struct1, 0, sizeof(struct1));
    memset(&struct2, 0, sizeof(struct2));

    // Decode each packet
    if(!decodeOrionBoardPacketStructure(pkt1, &struct1) || !decodeOrionBoardPacketStructure(pkt2, &struct2))
    {
        report = "OrionBoard packets failed to decode\n";
        return report;
    }

    // Check packet sizes. Even if sizes are different the packets may contain the same result
    if(getOrionPublicPacketSize(pkt1) != getOrionPublicPacketSize(pkt2))
        report += "OrionBoard packet sizes are different\n";

    report += compareOrionBoard_t("name", &struct1, &struct2);

    return report;

}// compareOrionBoardPacket
// end of compareOrionPublic.cpp
