// printOrionPublic.cpp was generated by ProtoGen version 2.12.c

#include "printOrionPublic.h"

/*!
 * Generate a string that describes the contents of a Date_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintDate_t(QString prename, const Date_t* user)
{
    QString report;

    report += prename + ":year"  + " '" + QString::number(user->year) + "'\n";

    report += prename + ":month"  + " '" + QString::number(user->month) + "'\n";

    report += prename + ":day"  + " '" + QString::number(user->day) + "'\n";

    return report;

}// textPrintDate_t

/*!
 * Generate a string that describes the contents of a OrionCmd_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCmd_t(QString prename, const OrionCmd_t* user)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":Target"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->Target[i], 'g', 16) + "'\n";

    report += prename + ":Mode"  + " '" + QString::number(user->Mode) + "'\n";

    report += prename + ":Stabilized"  + " '" + QString::number(user->Stabilized) + "'\n";

    report += prename + ":ImpulseTime"  + " '" + QString::number(user->ImpulseTime, 'g', 16) + "'\n";

    return report;

}// textPrintOrionCmd_t

/*!
 * Generate a string that describes the contents of a OrionStartupCmd_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionStartupCmd_t(QString prename, const OrionStartupCmd_t* user)
{
    QString report;

    report += textPrintOrionCmd_t(prename + ":Cmd", &user->Cmd);

    return report;

}// textPrintOrionStartupCmd_t

/*!
 * Generate a string that describes the contents of a OrionStartupCmd packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionStartupCmdPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionStartupCmd_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionStartupCmdPacketStructure(pkt, &user))
    {
        report = "OrionStartupCmd packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionStartupCmd packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionStartupCmd_t("name", &user);

    return report;

}// textPrintOrionStartupCmdPacket

//! Generate a string that describes the contents of a PosPreset_t structure
QString textPrintPosPreset_t(QString prename, const PosPreset_t* user);

/*!
 * Generate a string that describes the contents of a PosPreset_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintPosPreset_t(QString prename, const PosPreset_t* user)
{
    QString report;

    report += prename + ":Pan"  + " '" + QString::number(user->Pan, 'g', 16) + "'\n";

    report += prename + ":Tilt"  + " '" + QString::number(user->Tilt, 'g', 16) + "'\n";

    report += prename + ":Enabled"  + " '" + QString::number(user->Enabled) + "'\n";

    return report;

}// textPrintPosPreset_t

/*!
 * Generate a string that describes the contents of a OrionPositions_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionPositions_t(QString prename, const OrionPositions_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":NumPositions"  + " '" + QString::number(user->NumPositions) + "'\n";

    for(i = 0; i < NUM_POSITIONS; i++)
        report += textPrintPosPreset_t(prename + ":PosPreset" + "[" + QString::number(i) + "]", &user->PosPreset[i]);

    return report;

}// textPrintOrionPositions_t

/*!
 * Generate a string that describes the contents of a OrionPositions packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionPositionsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionPositions_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionPositionsPacketStructure(pkt, &user))
    {
        report = "OrionPositions packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionPositions packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionPositions_t("name", &user);

    return report;

}// textPrintOrionPositionsPacket

/*!
 * Generate a string that describes the contents of a OrionFlirSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionFlirSettings_t(QString prename, const OrionFlirSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":DisableSffc"  + " '" + QString::number(user->DisableSffc) + "'\n";

    report += prename + ":Palette"  + " '" + QString::number(user->Palette) + "'\n";

    report += prename + ":NucType"  + " '" + QString::number(user->NucType) + "'\n";

    report += prename + ":BlackHot"  + " '" + QString::number(user->BlackHot) + "'\n";

    report += prename + ":MaxAgcGain"  + " '" + QString::number(user->MaxAgcGain) + "'\n";

    report += prename + ":AceLevel"  + " '" + QString::number(user->AceLevel) + "'\n";

    report += prename + ":DdeThreshold"  + " '" + QString::number(user->DdeThreshold) + "'\n";

    report += prename + ":AgcMidpoint"  + " '" + QString::number(user->AgcMidpoint) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime, 'g', 16) + "'\n";

    report += prename + ":AgcType"  + " '" + QString::number(user->AgcType) + "'\n";

    return report;

}// textPrintOrionFlirSettings_t

/*!
 * Generate a string that describes the contents of a OrionFlirSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionFlirSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionFlirSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionFlirSettingsPacketStructure(pkt, &user))
    {
        report = "OrionFlirSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionFlirSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionFlirSettings_t("name", &user);

    return report;

}// textPrintOrionFlirSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionAptinaSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionAptinaSettings_t(QString prename, const OrionAptinaSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":MinExposure"  + " '" + QString::number(user->MinExposure, 'g', 16) + "'\n";

    report += prename + ":MaxExposure"  + " '" + QString::number(user->MaxExposure, 'g', 16) + "'\n";

    report += prename + ":MinGain"  + " '" + QString::number(user->MinGain, 'g', 16) + "'\n";

    report += prename + ":MaxGain"  + " '" + QString::number(user->MaxGain, 'g', 16) + "'\n";

    report += prename + ":Brightness"  + " '" + QString::number(user->Brightness) + "'\n";

    report += prename + ":Contrast"  + " '" + QString::number(user->Contrast, 'g', 16) + "'\n";

    report += prename + ":Saturation"  + " '" + QString::number(user->Saturation, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    report += prename + ":DebugEnable"  + " '" + QString::number(user->DebugEnable) + "'\n";

    report += prename + ":Hue"  + " '" + QString::number(user->Hue) + "'\n";

    report += prename + ":Aperture"  + " '" + QString::number(user->Aperture, 'g', 16) + "'\n";

    report += prename + ":MinAperture"  + " '" + QString::number(user->MinAperture, 'g', 16) + "'\n";

    report += prename + ":MaxAperture"  + " '" + QString::number(user->MaxAperture, 'g', 16) + "'\n";

    return report;

}// textPrintOrionAptinaSettings_t

/*!
 * Generate a string that describes the contents of a OrionAptinaSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionAptinaSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionAptinaSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionAptinaSettingsPacketStructure(pkt, &user))
    {
        report = "OrionAptinaSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionAptinaSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionAptinaSettings_t("name", &user);

    return report;

}// textPrintOrionAptinaSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionZafiroSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionZafiroSettings_t(QString prename, const OrionZafiroSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":BlackHot"  + " '" + QString::number(user->BlackHot) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime, 'g', 16) + "'\n";

    report += prename + ":LapEnabled"  + " '" + QString::number(user->LapEnabled) + "'\n";

    report += prename + ":LapGain"  + " '" + QString::number(user->LapGain, 'g', 16) + "'\n";

    report += prename + ":AgcSaturation"  + " '" + QString::number(user->AgcSaturation, 'g', 16) + "'\n";

    report += prename + ":UseNucTablePresets"  + " '" + QString::number(user->UseNucTablePresets) + "'\n";

    return report;

}// textPrintOrionZafiroSettings_t

/*!
 * Generate a string that describes the contents of a OrionZafiroSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionZafiroSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionZafiroSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionZafiroSettingsPacketStructure(pkt, &user))
    {
        report = "OrionZafiroSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionZafiroSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionZafiroSettings_t("name", &user);

    return report;

}// textPrintOrionZafiroSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionHitachiSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionHitachiSettings_t(QString prename, const OrionHitachiSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime) + "'\n";

    report += prename + ":Aperture"  + " '" + QString::number(user->Aperture, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    report += prename + ":NightMode"  + " '" + QString::number(user->NightMode) + "'\n";

    return report;

}// textPrintOrionHitachiSettings_t

/*!
 * Generate a string that describes the contents of a OrionHitachiSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionHitachiSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionHitachiSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionHitachiSettingsPacketStructure(pkt, &user))
    {
        report = "OrionHitachiSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionHitachiSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionHitachiSettings_t("name", &user);

    return report;

}// textPrintOrionHitachiSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionSonySettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionSonySettings_t(QString prename, const OrionSonySettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":MinExposure"  + " '" + QString::number(user->MinExposure, 'g', 16) + "'\n";

    report += prename + ":MaxExposure"  + " '" + QString::number(user->MaxExposure, 'g', 16) + "'\n";

    report += prename + ":MinGain"  + " '" + QString::number(user->MinGain) + "'\n";

    report += prename + ":MaxGain"  + " '" + QString::number(user->MaxGain) + "'\n";

    report += prename + ":Brightness"  + " '" + QString::number(user->Brightness) + "'\n";

    report += prename + ":Contrast"  + " '" + QString::number(user->Contrast, 'g', 16) + "'\n";

    report += prename + ":Saturation"  + " '" + QString::number(user->Saturation, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness, 'g', 16) + "'\n";

    report += prename + ":FrameRate"  + " '" + QString::number(user->FrameRate, 'g', 16) + "'\n";

    return report;

}// textPrintOrionSonySettings_t

/*!
 * Generate a string that describes the contents of a OrionSonySettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionSonySettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionSonySettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionSonySettingsPacketStructure(pkt, &user))
    {
        report = "OrionSonySettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionSonySettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionSonySettings_t("name", &user);

    return report;

}// textPrintOrionSonySettingsPacket

/*!
 * Generate a string that describes the contents of a OrionKtncSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionKtncSettings_t(QString prename, const OrionKtncSettings_t* user)
{
    QString report;

    report += prename + ":Index"  + " '" + QString::number(user->Index) + "'\n";

    report += prename + ":IntegrationTime"  + " '" + QString::number(user->IntegrationTime) + "'\n";

    report += prename + ":Aperture"  + " '" + QString::number(user->Aperture, 'g', 16) + "'\n";

    report += prename + ":Sharpness"  + " '" + QString::number(user->Sharpness) + "'\n";

    report += prename + ":VerticalFlip"  + " '" + QString::number(user->VerticalFlip) + "'\n";

    report += prename + ":ExposureComp"  + " '" + QString::number(user->ExposureComp) + "'\n";

    report += prename + ":Contrast"  + " '" + QString::number(user->Contrast) + "'\n";

    report += prename + ":Saturation"  + " '" + QString::number(user->Saturation) + "'\n";

    report += prename + ":NightMode"  + " '" + QString::number(user->NightMode) + "'\n";

    report += prename + ":ResetToDefaults"  + " '" + QString::number(user->ResetToDefaults) + "'\n";

    report += prename + ":HasMaxExposure"  + " '" + QString::number(user->HasMaxExposure) + "'\n";

    report += prename + ":MaxExposure"  + " '" + QString::number(user->MaxExposure, 'g', 16) + "'\n";

    report += prename + ":VersionMajor"  + " '" + QString::number(user->VersionMajor) + "'\n";

    report += prename + ":VersionMinor"  + " '" + QString::number(user->VersionMinor) + "'\n";

    report += prename + ":VersionPatch"  + " '" + QString::number(user->VersionPatch) + "'\n";

    return report;

}// textPrintOrionKtncSettings_t

/*!
 * Generate a string that describes the contents of a OrionKtncSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionKtncSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionKtncSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionKtncSettingsPacketStructure(pkt, &user))
    {
        report = "OrionKtncSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionKtncSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionKtncSettings_t("name", &user);

    return report;

}// textPrintOrionKtncSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionUartConfig_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionUartConfig_t(QString prename, const OrionUartConfig_t* user)
{
    QString report;

    report += prename + ":port"  + " '" + QString::number(user->port) + "'\n";

    report += prename + ":baud"  + " '" + QString::number(user->baud) + "'\n";

    report += prename + ":protocol"  + " '" + QString::number(user->protocol) + "'\n";

    report += prename + ":temporary"  + " '" + QString::number(user->temporary) + "'\n";

    report += prename + ":param"  + " '" + QString::number(user->param) + "'\n";

    return report;

}// textPrintOrionUartConfig_t

/*!
 * Generate a string that describes the contents of a OrionUartConfig packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionUartConfigPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionUartConfig_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionUartConfigPacketStructure(pkt, &user))
    {
        report = "OrionUartConfig packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionUartConfig packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionUartConfig_t("name", &user);

    return report;

}// textPrintOrionUartConfigPacket

/*!
 * Generate a string that describes the contents of a OrionLimitsData_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionLimitsData_t(QString prename, const OrionLimitsData_t* user)
{
    QString report;
    int i = 0;

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MinPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MinPos[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxPos"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxPos[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxVel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxVel[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxAccel"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxAccel[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":ContCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->ContCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":PeakCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->PeakCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":PeakCurTime"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->PeakCurTime[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":InitCur"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->InitCur[i], 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":MaxPower"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->MaxPower[i], 'g', 16) + "'\n";

    return report;

}// textPrintOrionLimitsData_t

/*!
 * Generate a string that describes the contents of a OrionLimitsData packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionLimitsDataPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionLimitsData_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionLimitsDataPacketStructure(pkt, &user))
    {
        report = "OrionLimitsData packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionLimitsData packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionLimitsData_t("name", &user);

    return report;

}// textPrintOrionLimitsDataPacket

/*!
 * Generate a string that describes the contents of a InsOptions_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintInsOptions_t(QString prename, const InsOptions_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":enablePlatformRotation"  + " '" + QString::number(user->enablePlatformRotation) + "'\n";

    report += prename + ":enableCourseIsHeading"  + " '" + QString::number(user->enableCourseIsHeading) + "'\n";

    report += prename + ":disableMagnetometer"  + " '" + QString::number(user->disableMagnetometer) + "'\n";

    report += prename + ":disableGPS"  + " '" + QString::number(user->disableGPS) + "'\n";

    report += prename + ":resetINS"  + " '" + QString::number(user->resetINS) + "'\n";

    report += prename + ":disableGpsClockError"  + " '" + QString::number(user->disableGpsClockError) + "'\n";

    report += prename + ":enableAccelBias"  + " '" + QString::number(user->enableAccelBias) + "'\n";

    report += prename + ":enableTightlyCoupled"  + " '" + QString::number(user->enableTightlyCoupled) + "'\n";

    report += prename + ":usePhaseForVelocity"  + " '" + QString::number(user->usePhaseForVelocity) + "'\n";

    report += prename + ":disableL1"  + " '" + QString::number(user->disableL1) + "'\n";

    report += prename + ":disableL2"  + " '" + QString::number(user->disableL2) + "'\n";

    report += prename + ":disableL5"  + " '" + QString::number(user->disableL5) + "'\n";

    report += prename + ":elevationMask"  + " '" + QString::number(user->elevationMask, 'g', 16) + "'\n";

    report += prename + ":enablePayloadIns"  + " '" + QString::number(user->enablePayloadIns) + "'\n";

    report += prename + ":enableNonLinearHeading"  + " '" + QString::number(user->enableNonLinearHeading) + "'\n";

    report += prename + ":enableSensonorMV"  + " '" + QString::number(user->enableSensonorMV) + "'\n";

    report += prename + ":enableHD25PayloadINS"  + " '" + QString::number(user->enableHD25PayloadINS) + "'\n";

    report += prename + ":opticalFlowSetting"  + " '" + QString::number(user->opticalFlowSetting) + "'\n";

    report += prename + ":enableCustomIMURotation"  + " '" + QString::number(user->enableCustomIMURotation) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        report += prename + ":gimbalToPlatformEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->gimbalToPlatformEuler[i]*57.29577951308232, 'g', 16) + "'\n";

    report += prename + ":initialHeading"  + " '" + QString::number(user->initialHeading*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        report += prename + ":gpsLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->gpsLeverArm[i], 'g', 16) + "'\n";

    report += prename + ":headingObservationBiasAngle"  + " '" + QString::number(user->headingObservationBiasAngle*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < 3; i++)
        report += prename + ":secondGPSLeverArm"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->secondGPSLeverArm[i], 'g', 16) + "'\n";

    report += prename + ":alignHeadingNoise"  + " '" + QString::number(user->alignHeadingNoise*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_AXES; i++)
        report += prename + ":imuToInsEuler"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->imuToInsEuler[i]*57.29577951308232, 'g', 16) + "'\n";

    return report;

}// textPrintInsOptions_t

/*!
 * Generate a string that describes the contents of a InsOptions packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintInsOptionsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    InsOptions_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeInsOptionsPacketStructure(pkt, &user))
    {
        report = "InsOptions packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "InsOptions packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintInsOptions_t("name", &user);

    return report;

}// textPrintInsOptionsPacket

/*!
 * Generate a string that describes the contents of a OrionNetworkByteSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionNetworkByteSettings_t(QString prename, const OrionNetworkByteSettings_t* user)
{
    QString report;
    int i = 0;

    for(i = 0; i < 4; i++)
        report += prename + ":Ip"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->Ip[i]) + "'\n";

    for(i = 0; i < 4; i++)
        report += prename + ":Mask"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->Mask[i]) + "'\n";

    for(i = 0; i < 4; i++)
        report += prename + ":Gateway"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->Gateway[i]) + "'\n";

    report += prename + ":LowDelay"  + " '" + QString::number(user->LowDelay) + "'\n";

    report += prename + ":Mtu"  + " '" + QString::number(user->Mtu) + "'\n";

    report += prename + ":SecondaryTcpPort"  + " '" + QString::number(user->SecondaryTcpPort) + "'\n";

    report += prename + ":LowBandwidth"  + " '" + QString::number(user->LowBandwidth) + "'\n";

    return report;

}// textPrintOrionNetworkByteSettings_t

/*!
 * Generate a string that describes the contents of a OrionNetworkByteSettings packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionNetworkByteSettingsPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionNetworkByteSettings_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionNetworkByteSettingsPacketStructure(pkt, &user))
    {
        report = "OrionNetworkByteSettings packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionNetworkByteSettings packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionNetworkByteSettings_t("name", &user);

    return report;

}// textPrintOrionNetworkByteSettingsPacket

/*!
 * Generate a string that describes the contents of a OrionNetworkByteVideo_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionNetworkByteVideo_t(QString prename, const OrionNetworkByteVideo_t* user)
{
    QString report;
    int i = 0;

    for(i = 0; i < 4; i++)
        report += prename + ":DestIp"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->DestIp[i]) + "'\n";

    report += prename + ":Port"  + " '" + QString::number(user->Port) + "'\n";

    report += prename + ":Bitrate"  + " '" + QString::number(user->Bitrate) + "'\n";

    report += prename + ":Ttl"  + " '" + QString::number(user->Ttl) + "'\n";

    report += prename + ":StreamType"  + " '" + QString::number(user->StreamType) + "'\n";

    report += prename + ":MjpegQuality"  + " '" + QString::number(user->MjpegQuality) + "'\n";

    report += prename + ":SaveSettings"  + " '" + QString::number(user->SaveSettings) + "'\n";

    report += prename + ":TsPacketCount"  + " '" + QString::number(user->TsPacketCount) + "'\n";

    report += prename + ":FramePeriod"  + " '" + QString::number(user->FramePeriod) + "'\n";

    return report;

}// textPrintOrionNetworkByteVideo_t

/*!
 * Generate a string that describes the contents of a OrionNetworkByteVideo packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionNetworkByteVideoPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionNetworkByteVideo_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionNetworkByteVideoPacketStructure(pkt, &user))
    {
        report = "OrionNetworkByteVideo packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionNetworkByteVideo packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionNetworkByteVideo_t("name", &user);

    return report;

}// textPrintOrionNetworkByteVideoPacket

//! Generate a string that describes the contents of a OrionCamSettings_t structure
QString textPrintOrionCamSettings_t(QString prename, const OrionCamSettings_t* user);

/*!
 * Generate a string that describes the contents of a OrionCamSettings_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCamSettings_t(QString prename, const OrionCamSettings_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":Type"  + " '" + QString::number(user->Type) + "'\n";

    report += prename + ":Proto"  + " '" + QString::number(user->Proto) + "'\n";

    report += prename + ":MinFocalLength"  + " '" + QString::number(user->MinFocalLength, 'g', 16) + "'\n";

    report += prename + ":MaxFocalLength"  + " '" + QString::number(user->MaxFocalLength, 'g', 16) + "'\n";

    report += prename + ":PixelPitch"  + " '" + QString::number(user->PixelPitch, 'g', 16) + "'\n";

    report += prename + ":ArrayWidth"  + " '" + QString::number(user->ArrayWidth) + "'\n";

    report += prename + ":ArrayHeight"  + " '" + QString::number(user->ArrayHeight) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":AlignMin"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->AlignMin[i]*57.29577951308232, 'g', 16) + "'\n";

    for(i = 0; i < NUM_GIMBAL_AXES; i++)
        report += prename + ":AlignMax"  + "[" + QString::number(i) + "]" + " '" + QString::number(user->AlignMax[i]*57.29577951308232, 'g', 16) + "'\n";

    return report;

}// textPrintOrionCamSettings_t

/*!
 * Generate a string that describes the contents of a OrionCameras_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCameras_t(QString prename, const OrionCameras_t* user)
{
    QString report;
    int i = 0;

    report += prename + ":NumCameras"  + " '" + QString::number(user->NumCameras) + "'\n";

    // Camera settings information
    for(i = 0; i < NUM_CAMERAS; i++)
        report += textPrintOrionCamSettings_t(prename + ":OrionCamSettings" + "[" + QString::number(i) + "]", &user->OrionCamSettings[i]);

    return report;

}// textPrintOrionCameras_t

/*!
 * Generate a string that describes the contents of a OrionCameras packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionCamerasPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionCameras_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionCamerasPacketStructure(pkt, &user))
    {
        report = "OrionCameras packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionCameras packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionCameras_t("name", &user);

    return report;

}// textPrintOrionCamerasPacket

/*!
 * Generate a string that describes the contents of a OrionClevisVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionClevisVersion_t(QString prename, const OrionClevisVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    report += prename + ":PartNumber '" + QString(user->PartNumber) + "'\n";

    report += prename + ":OnTime"  + " '" + QString::number(user->OnTime) + "'\n";

    return report;

}// textPrintOrionClevisVersion_t

/*!
 * Generate a string that describes the contents of a OrionClevisVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionClevisVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionClevisVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionClevisVersionPacketStructure(pkt, &user))
    {
        report = "OrionClevisVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionClevisVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionClevisVersion_t("name", &user);

    return report;

}// textPrintOrionClevisVersionPacket

/*!
 * Generate a string that describes the contents of a OrionCrownVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionCrownVersion_t(QString prename, const OrionCrownVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    report += prename + ":PartNumber '" + QString(user->PartNumber) + "'\n";

    report += prename + ":OnTime"  + " '" + QString::number(user->OnTime) + "'\n";

    return report;

}// textPrintOrionCrownVersion_t

/*!
 * Generate a string that describes the contents of a OrionCrownVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionCrownVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionCrownVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionCrownVersionPacketStructure(pkt, &user))
    {
        report = "OrionCrownVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionCrownVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionCrownVersion_t("name", &user);

    return report;

}// textPrintOrionCrownVersionPacket

/*!
 * Generate a string that describes the contents of a OrionPayloadVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionPayloadVersion_t(QString prename, const OrionPayloadVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    report += prename + ":PartNumber '" + QString(user->PartNumber) + "'\n";

    report += prename + ":OnTime"  + " '" + QString::number(user->OnTime) + "'\n";

    return report;

}// textPrintOrionPayloadVersion_t

/*!
 * Generate a string that describes the contents of a OrionPayloadVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionPayloadVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionPayloadVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionPayloadVersionPacketStructure(pkt, &user))
    {
        report = "OrionPayloadVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionPayloadVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionPayloadVersion_t("name", &user);

    return report;

}// textPrintOrionPayloadVersionPacket

/*!
 * Generate a string that describes the contents of a OrionTrackerVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionTrackerVersion_t(QString prename, const OrionTrackerVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    report += prename + ":PartNumber '" + QString(user->PartNumber) + "'\n";

    report += prename + ":AppBits"  + " '" + QString::number(user->AppBits) + "'\n";

    return report;

}// textPrintOrionTrackerVersion_t

/*!
 * Generate a string that describes the contents of a OrionTrackerVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionTrackerVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionTrackerVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionTrackerVersionPacketStructure(pkt, &user))
    {
        report = "OrionTrackerVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionTrackerVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionTrackerVersion_t("name", &user);

    return report;

}// textPrintOrionTrackerVersionPacket

/*!
 * Generate a string that describes the contents of a OrionRetractVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionRetractVersion_t(QString prename, const OrionRetractVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    return report;

}// textPrintOrionRetractVersion_t

/*!
 * Generate a string that describes the contents of a OrionRetractVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionRetractVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionRetractVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionRetractVersionPacketStructure(pkt, &user))
    {
        report = "OrionRetractVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionRetractVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionRetractVersion_t("name", &user);

    return report;

}// textPrintOrionRetractVersionPacket

/*!
 * Generate a string that describes the contents of a OrionLensCtlVersion_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionLensCtlVersion_t(QString prename, const OrionLensCtlVersion_t* user)
{
    QString report;

    report += prename + ":Version '" + QString(user->Version) + "'\n";

    return report;

}// textPrintOrionLensCtlVersion_t

/*!
 * Generate a string that describes the contents of a OrionLensCtlVersion packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionLensCtlVersionPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionLensCtlVersion_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionLensCtlVersionPacketStructure(pkt, &user))
    {
        report = "OrionLensCtlVersion packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionLensCtlVersion packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionLensCtlVersion_t("name", &user);

    return report;

}// textPrintOrionLensCtlVersionPacket

/*!
 * Generate a string that describes the contents of a OrionBoard_t structure
 * \param prename is prepended to the name of the data field in the report
 * \param user is the structure to report
 * \return a string containing a report of the contents of user
 */
QString textPrintOrionBoard_t(QString prename, const OrionBoard_t* user)
{
    QString report;

    report += prename + ":boardSN"  + " '" + QString::number(user->boardSN) + "'\n";

    report += prename + ":assemblySN"  + " '" + QString::number(user->assemblySN) + "'\n";

    report += prename + ":config"  + " '" + QString::number(user->config) + "'\n";

    report += prename + ":boardEnum"  + " '" + QString::number(user->boardEnum) + "'\n";

    report += textPrintDate_t(prename + ":manufactureDate", &user->manufactureDate);

    report += textPrintDate_t(prename + ":calibrationDate", &user->calibrationDate);

    return report;

}// textPrintOrionBoard_t

/*!
 * Generate a string that describes the contents of a OrionBoard packet
 * \param prename is prepended to the name of the data field in the report
 * \param pkt is the data to print
 * \return a string describing the contents of pkt
 */
QString textPrintOrionBoardPacket(const void* pkt)
{
    QString report;

    // Structure to decode into
    OrionBoard_t user;

    // All zeroes before decoding
    memset(&user, 0, sizeof(user));

    // Decode packet
    if(!decodeOrionBoardPacketStructure(pkt, &user))
    {
        report = "OrionBoard packet failed to decode\n";
        return report;
    }

    // Print the packet size
    report += "OrionBoard packet size is " + QString::number(getOrionPublicPacketSize(pkt)) + "\n";

    report += textPrintOrionBoard_t("name", &user);

    return report;

}// textPrintOrionBoardPacket
// end of printOrionPublic.cpp
