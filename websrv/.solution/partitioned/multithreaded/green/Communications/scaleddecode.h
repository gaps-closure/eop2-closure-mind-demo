// scaleddecode.h was generated by ProtoGen version 2.12.c

#ifndef _SCALEDDECODE_H
#define _SCALEDDECODE_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 * scaleddecode routines extract scaled numbers from a byte stream.
 *
 * scaleddecode routines extract scaled numbers from a byte stream. The routines
 * in this module are the reverse operation of the routines in scaledencode.
 */
#define __STDC_CONSTANT_MACROS
#include <stdint.h>

//! Inverse scale the bitfield base integer type to a float64
double float64ScaledFromBitfield(unsigned int value, double min, double invscaler);

//! Inverse scale the bitfield base integer type to a float32

#ifdef UINT64_MAX

//! Inverse scale the long bitfield base integer type to a float64
double float64ScaledFromLongBitfield(uint64_t value, double min, double invscaler);

//! Inverse scale the long bitfield base integer type to a float32
float float32ScaledFromLongBitfield(uint64_t value, float min, float invscaler);

//! Compute a double scaled from 8 unsigned bytes in big endian order.

//! Compute a double scaled from 8 unsigned bytes in little endian order.

//! Compute a double scaled from 8 signed bytes in big endian order.

//! Compute a double scaled from 8 signed bytes in little endian order.
double float64ScaledFrom8SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 7 unsigned bytes in big endian order.

//! Compute a double scaled from 7 unsigned bytes in little endian order.
double float64ScaledFrom7UnsignedLeBytes(const uint8_t* bytes, int* index, double min, double invscaler);

//! Compute a double scaled from 7 signed bytes in big endian order.

//! Compute a double scaled from 7 signed bytes in little endian order.
double float64ScaledFrom7SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 6 unsigned bytes in big endian order.

//! Compute a double scaled from 6 unsigned bytes in little endian order.
double float64ScaledFrom6UnsignedLeBytes(const uint8_t* bytes, int* index, double min, double invscaler);

//! Compute a double scaled from 6 signed bytes in big endian order.

//! Compute a double scaled from 6 signed bytes in little endian order.
double float64ScaledFrom6SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 5 unsigned bytes in big endian order.

//! Compute a double scaled from 5 unsigned bytes in little endian order.
double float64ScaledFrom5UnsignedLeBytes(const uint8_t* bytes, int* index, double min, double invscaler);

//! Compute a double scaled from 5 signed bytes in big endian order.

//! Compute a double scaled from 5 signed bytes in little endian order.
double float64ScaledFrom5SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

#endif // UINT64_MAX

//! Compute a double scaled from 4 unsigned bytes in big endian order.

//! Compute a double scaled from 4 unsigned bytes in little endian order.

//! Compute a double scaled from 4 signed bytes in big endian order.

//! Compute a double scaled from 4 signed bytes in little endian order.
double float64ScaledFrom4SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 3 unsigned bytes in big endian order.

//! Compute a double scaled from 3 unsigned bytes in little endian order.

//! Compute a double scaled from 3 signed bytes in big endian order.

//! Compute a double scaled from 3 signed bytes in little endian order.
double float64ScaledFrom3SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 2 unsigned bytes in big endian order.

//! Compute a double scaled from 2 unsigned bytes in little endian order.

//! Compute a double scaled from 2 signed bytes in big endian order.

//! Compute a double scaled from 2 signed bytes in little endian order.
double float64ScaledFrom2SignedLeBytes(const uint8_t* bytes, int* index, double invscaler);

//! Compute a double scaled from 1 unsigned byte.

//! Compute a double scaled from 1 signed byte.

//! Compute a float scaled from 4 unsigned bytes in big endian order.

//! Compute a float scaled from 4 unsigned bytes in little endian order.

//! Compute a float scaled from 4 signed bytes in big endian order.

//! Compute a float scaled from 4 signed bytes in little endian order.
float float32ScaledFrom4SignedLeBytes(const uint8_t* bytes, int* index, float invscaler);

//! Compute a float scaled from 3 unsigned bytes in big endian order.

//! Compute a float scaled from 3 unsigned bytes in little endian order.

//! Compute a float scaled from 3 signed bytes in big endian order.

//! Compute a float scaled from 3 signed bytes in little endian order.
float float32ScaledFrom3SignedLeBytes(const uint8_t* bytes, int* index, float invscaler);

//! Compute a float scaled from 2 unsigned bytes in big endian order.

//! Compute a float scaled from 2 unsigned bytes in little endian order.

//! Compute a float scaled from 2 signed bytes in big endian order.

//! Compute a float scaled from 2 signed bytes in little endian order.
float float32ScaledFrom2SignedLeBytes(const uint8_t* bytes, int* index, float invscaler);

//! Compute a float scaled from 1 unsigned byte.

//! Compute a float scaled from 1 signed byte.

#ifdef __cplusplus
}
#endif
#endif
